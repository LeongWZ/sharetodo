/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIdImport } from './routes/projects/$id'

// Create Virtual Routes

const ForgetPasswordLazyImport = createFileRoute('/forget-password')()

// Create/Update Routes

const ForgetPasswordLazyRoute = ForgetPasswordLazyImport.update({
  id: '/forget-password',
  path: '/forget-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forget-password.lazy').then((d) => d.Route),
)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIdRoute = ProjectsIdImport.update({
  id: '/projects/$id',
  path: '/projects/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/forget-password': {
      id: '/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof ForgetPasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/forget-password': typeof ForgetPasswordLazyRoute
  '/projects/$id': typeof ProjectsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/forget-password': typeof ForgetPasswordLazyRoute
  '/projects/$id': typeof ProjectsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/forget-password': typeof ForgetPasswordLazyRoute
  '/projects/$id': typeof ProjectsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/forget-password'
    | '/projects/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/forget-password'
    | '/projects/$id'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/forget-password'
    | '/projects/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  ForgetPasswordLazyRoute: typeof ForgetPasswordLazyRoute
  ProjectsIdRoute: typeof ProjectsIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  ForgetPasswordLazyRoute: ForgetPasswordLazyRoute,
  ProjectsIdRoute: ProjectsIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/reset-password",
        "/forget-password",
        "/projects/$id"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/register": {
      "filePath": "register.jsx"
    },
    "/reset-password": {
      "filePath": "reset-password.jsx"
    },
    "/forget-password": {
      "filePath": "forget-password.lazy.jsx"
    },
    "/projects/$id": {
      "filePath": "projects/$id.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
